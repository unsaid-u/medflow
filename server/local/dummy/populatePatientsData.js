// This is helper file to populate the database with dummy data for patients
// * entirely generated by chatgpt

const { PatientsModel } = require("../../models/patient.model");

// Sample data arrays for generating realistic patient information
const firstNames = [
  "John",
  "Jane",
  "Michael",
  "Sarah",
  "David",
  "Emily",
  "Robert",
  "Jessica",
  "William",
  "Amanda",
  "James",
  "Ashley",
  "Christopher",
  "Stephanie",
  "Daniel",
  "Nicole",
  "Matthew",
  "Elizabeth",
  "Anthony",
  "Megan",
  "Joshua",
  "Lauren",
  "Andrew",
  "Rachel",
  "Ryan",
  "Kayla",
  "Brandon",
  "Samantha",
  "Justin",
  "Amber",
  "Tyler",
  "Danielle",
  "Kevin",
  "Brittany",
  "Steven",
  "Victoria",
];

const lastNames = [
  "Smith",
  "Johnson",
  "Williams",
  "Brown",
  "Jones",
  "Garcia",
  "Miller",
  "Davis",
  "Rodriguez",
  "Martinez",
  "Hernandez",
  "Lopez",
  "Gonzalez",
  "Wilson",
  "Anderson",
  "Thomas",
  "Taylor",
  "Moore",
  "Jackson",
  "Martin",
  "Lee",
  "Perez",
  "Thompson",
  "White",
  "Harris",
  "Sanchez",
  "Clark",
  "Ramirez",
  "Lewis",
  "Robinson",
  "Walker",
  "Young",
  "Allen",
  "King",
];

const cities = [
  "New York",
  "Los Angeles",
  "Chicago",
  "Houston",
  "Phoenix",
  "Philadelphia",
  "San Antonio",
  "San Diego",
  "Dallas",
  "San Jose",
  "Austin",
  "Jacksonville",
  "Fort Worth",
  "Columbus",
  "Charlotte",
  "San Francisco",
  "Indianapolis",
  "Seattle",
  "Denver",
  "Washington",
  "Boston",
  "El Paso",
  "Nashville",
  "Detroit",
  "Oklahoma City",
  "Portland",
  "Las Vegas",
  "Memphis",
  "Louisville",
];

const states = [
  "NY",
  "CA",
  "IL",
  "TX",
  "AZ",
  "PA",
  "FL",
  "OH",
  "NC",
  "WA",
  "CO",
  "DC",
  "MA",
  "TN",
  "MI",
  "OK",
  "OR",
  "NV",
  "KY",
  "GA",
  "VA",
  "NJ",
  "WI",
  "MN",
];

const streetNames = [
  "Main St",
  "Oak Ave",
  "Maple Dr",
  "Cedar Ln",
  "Pine Rd",
  "Elm St",
  "Washington Ave",
  "Park Dr",
  "Lake Rd",
  "Hill St",
  "River Ave",
  "Forest Dr",
  "Sunset Blvd",
  "Mountain View",
  "Ocean Dr",
  "Valley Rd",
  "Spring St",
  "Summer Ave",
  "Winter Dr",
];

// Generate a random phone number
function generatePhoneNumber() {
  const areaCode = Math.floor(Math.random() * 900) + 100; // 100-999
  const prefix = Math.floor(Math.random() * 900) + 100; // 100-999
  const lineNumber = Math.floor(Math.random() * 9000) + 1000; // 1000-9999
  return `${areaCode}-${prefix}-${lineNumber}`;
}

// Generate a random date of birth (18-80 years old)
function generateDateOfBirth() {
  const start = new Date(1944, 0, 1); // 80 years ago
  const end = new Date(2006, 0, 1); // 18 years ago
  const randomDate = new Date(
    start.getTime() + Math.random() * (end.getTime() - start.getTime())
  );
  return randomDate.toISOString().split("T")[0]; // Format as YYYY-MM-DD
}

// Generate a random address
function generateAddress() {
  const streetNumber = Math.floor(Math.random() * 9999) + 1;
  const streetName =
    streetNames[Math.floor(Math.random() * streetNames.length)];
  const city = cities[Math.floor(Math.random() * cities.length)];
  const state = states[Math.floor(Math.random() * states.length)];
  const zipCode = Math.floor(Math.random() * 90000) + 10000; // 5-digit zip

  return `${streetNumber} ${streetName}, ${city}, ${state} ${zipCode}`;
}

// Generate a random email based on name
function generateEmail(firstName, lastName) {
  const domains = [
    "gmail.com",
    "yahoo.com",
    "hotmail.com",
    "outlook.com",
    "aol.com",
  ];
  const domain = domains[Math.floor(Math.random() * domains.length)];
  const randomNum = Math.floor(Math.random() * 999) + 1;

  // Different email patterns
  const patterns = [
    `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${domain}`,
    `${firstName.toLowerCase()}${lastName.toLowerCase()}@${domain}`,
    `${firstName.toLowerCase()}_${lastName.toLowerCase()}@${domain}`,
    `${firstName.toLowerCase()}${randomNum}@${domain}`,
    `${lastName.toLowerCase()}.${firstName.toLowerCase()}@${domain}`,
  ];

  return patterns[Math.floor(Math.random() * patterns.length)];
}

// Generate a single patient record
function generatePatientRecord() {
  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
  const fullName = `${firstName} ${lastName}`;

  return {
    name: fullName,
    email: generateEmail(firstName, lastName),
    contact: generatePhoneNumber(),
    address: generateAddress(),
    dob: generateDateOfBirth(),
    profile_image: null, // Optional field, set to null for dummy data
  };
}

// Main function to populate dummy patient data
async function populateDummyPatients(count = 20) {
  try {
    console.log(`Starting to populate ${count} dummy patient records...`);

    const patients = [];

    // Generate patient records
    for (let i = 0; i < count; i++) {
      const patientData = generatePatientRecord();
      patients.push(patientData);
    }

    // Insert patients using the PatientsModel
    const createdPatients = [];
    for (const patientData of patients) {
      try {
        const createdPatient = await PatientsModel.createPatient(patientData);
        createdPatients.push(createdPatient);
        console.log(
          `‚úÖ Created patient: ${patientData.name} (${patientData.email})`
        );
      } catch (error) {
        console.error(
          `‚ùå Failed to create patient ${patientData.name}:`,
          error.message
        );
      }
    }

    console.log(
      `\nüéâ Successfully created ${createdPatients.length} patient records!`
    );
    console.log(
      `üìä Total patients in database: ${await PatientsModel.query().resultSize()}`
    );

    return createdPatients;
  } catch (error) {
    console.error("‚ùå Error populating dummy patient data:", error);
    throw error;
  }
}

// Export functions for use in other files
module.exports = {
  populateDummyPatients,
  generatePatientRecord,
};

// If this file is run directly, populate 20 patients
if (require.main === module) {
  populateDummyPatients(15)
    .then(() => {
      console.log("‚úÖ Dummy data population completed!");
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå Dummy data population failed:", error);
      process.exit(1);
    });
}
